"""
Tools ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi m√°y t√≠nh
"""
import os
import subprocess
import shutil
import glob
import psutil
import json
import requests
from typing import List, Dict, Any, Optional
from pathlib import Path

class ComputerTools:
    """Class ch·ª©a c√°c tools t∆∞∆°ng t√°c v·ªõi m√°y t√≠nh"""
    
    def __init__(self):
        self.safe_mode = True  # Ch·∫ø ƒë·ªô an to√†n, h·ªèi tr∆∞·ªõc khi th·ª±c hi·ªán
    
    def execute_command(self, command: str, confirm: bool = True) -> Dict[str, Any]:
        """Th·ª±c hi·ªán l·ªánh h·ªá th·ªëng"""
        if self.safe_mode and confirm:
            print(f"‚ö†Ô∏è  S·∫Øp th·ª±c hi·ªán l·ªánh: {command}")
            choice = input("X√°c nh·∫≠n? (y/n): ").lower()
            if choice != 'y':
                return {"success": False, "message": "ƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng"}
        
        try:
            result = subprocess.run(
                command, 
                shell=True, 
                capture_output=True, 
                text=True,
                timeout=30
            )
            
            return {
                "success": result.returncode == 0,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "return_code": result.returncode
            }
        except subprocess.TimeoutExpired:
            return {"success": False, "message": "Command timeout"}
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def list_files(self, path: str = ".", pattern: str = "*") -> List[Dict[str, Any]]:
        """Li·ªát k√™ files trong th∆∞ m·ª•c"""
        try:
            path_obj = Path(path)
            if not path_obj.exists():
                return []
            
            files = []
            for item in path_obj.glob(pattern):
                stat = item.stat()
                files.append({
                    "name": item.name,
                    "path": str(item),
                    "is_dir": item.is_dir(),
                    "size": stat.st_size,
                    "modified": stat.st_mtime
                })
            
            return sorted(files, key=lambda x: (not x["is_dir"], x["name"]))
        except Exception as e:
            return [{"error": str(e)}]
    
    def create_folder(self, path: str) -> Dict[str, Any]:
        """T·∫°o th∆∞ m·ª•c"""
        try:
            Path(path).mkdir(parents=True, exist_ok=True)
            return {"success": True, "message": f"ƒê√£ t·∫°o th∆∞ m·ª•c: {path}"}
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def copy_file(self, src: str, dst: str) -> Dict[str, Any]:
        """Copy file"""
        try:
            if self.safe_mode:
                print(f"üîÑ Copy {src} -> {dst}")
                choice = input("X√°c nh·∫≠n? (y/n): ").lower()
                if choice != 'y':
                    return {"success": False, "message": "ƒê√£ h·ªßy"}
            
            shutil.copy2(src, dst)
            return {"success": True, "message": f"ƒê√£ copy {src} -> {dst}"}
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def move_file(self, src: str, dst: str) -> Dict[str, Any]:
        """Di chuy·ªÉn file"""
        try:
            if self.safe_mode:
                print(f"üìÅ Move {src} -> {dst}")
                choice = input("X√°c nh·∫≠n? (y/n): ").lower()
                if choice != 'y':
                    return {"success": False, "message": "ƒê√£ h·ªßy"}
            
            shutil.move(src, dst)
            return {"success": True, "message": f"ƒê√£ move {src} -> {dst}"}
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def delete_file(self, path: str) -> Dict[str, Any]:
        """X√≥a file/folder"""
        try:
            if self.safe_mode:
                print(f"üóëÔ∏è  Delete: {path}")
                choice = input("X√°c nh·∫≠n? (y/n): ").lower()
                if choice != 'y':
                    return {"success": False, "message": "ƒê√£ h·ªßy"}
            
            path_obj = Path(path)
            if path_obj.is_dir():
                shutil.rmtree(path)
            else:
                path_obj.unlink()
            
            return {"success": True, "message": f"ƒê√£ x√≥a: {path}"}
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def read_file(self, path: str, encoding: str = "utf-8") -> Dict[str, Any]:
        """ƒê·ªçc file"""
        try:
            with open(path, 'r', encoding=encoding) as f:
                content = f.read()
            
            return {
                "success": True, 
                "content": content,
                "size": len(content),
                "lines": content.count('\n') + 1
            }
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def write_file(self, path: str, content: str, encoding: str = "utf-8") -> Dict[str, Any]:
        """Ghi file"""
        try:
            if self.safe_mode and Path(path).exists():
                print(f"üìù Ghi ƒë√® file: {path}")
                choice = input("X√°c nh·∫≠n? (y/n): ").lower()
                if choice != 'y':
                    return {"success": False, "message": "ƒê√£ h·ªßy"}
            
            with open(path, 'w', encoding=encoding) as f:
                f.write(content)
            
            return {"success": True, "message": f"ƒê√£ ghi file: {path}"}
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def search_files(self, query: str, path: str = ".", file_pattern: str = "*") -> List[Dict[str, Any]]:
        """T√¨m ki·∫øm files theo t√™n ho·∫∑c n·ªôi dung"""
        results = []
        
        try:
            # T√¨m theo t√™n file
            for file_path in Path(path).rglob(file_pattern):
                if query.lower() in file_path.name.lower():
                    results.append({
                        "type": "filename",
                        "path": str(file_path),
                        "match": file_path.name
                    })
            
            # T√¨m trong n·ªôi dung file text
            for file_path in Path(path).rglob("*.txt"):
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if query.lower() in content.lower():
                            results.append({
                                "type": "content",
                                "path": str(file_path),
                                "match": f"Found in content"
                            })
                except:
                    continue
            
            return results[:20]  # Gi·ªõi h·∫°n 20 k·∫øt qu·∫£
        except Exception as e:
            return [{"error": str(e)}]
    
    def get_system_info(self) -> Dict[str, Any]:
        """L·∫•y th√¥ng tin h·ªá th·ªëng"""
        try:
            return {
                "cpu_percent": psutil.cpu_percent(interval=1),
                "memory": {
                    "total": psutil.virtual_memory().total,
                    "available": psutil.virtual_memory().available,
                    "percent": psutil.virtual_memory().percent
                },
                "disk": {
                    "total": psutil.disk_usage('/').total,
                    "free": psutil.disk_usage('/').free,
                    "percent": psutil.disk_usage('/').percent
                },
                "processes": len(psutil.pids())
            }
        except Exception as e:
            return {"error": str(e)}
    
    def get_running_processes(self) -> List[Dict[str, Any]]:
        """L·∫•y danh s√°ch processes ƒëang ch·∫°y"""
        try:
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                try:
                    processes.append(proc.info)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            # Sort theo CPU usage
            return sorted(processes, key=lambda x: x['cpu_percent'] or 0, reverse=True)[:10]
        except Exception as e:
            return [{"error": str(e)}]
    
    def get_weather(self, city: str = "Ho Chi Minh City") -> Dict[str, Any]:
        """L·∫•y th√¥ng tin th·ªùi ti·∫øt (c·∫ßn API key)"""
        try:
            # S·ª≠ d·ª•ng free weather API
            url = f"http://wttr.in/{city}?format=j1"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                current = data['current_condition'][0]
                
                return {
                    "success": True,
                    "city": city,
                    "temperature": current['temp_C'],
                    "description": current['weatherDesc'][0]['value'],
                    "humidity": current['humidity'],
                    "wind_speed": current['windspeedKmph']
                }
            else:
                return {"success": False, "message": "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt"}
                
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def open_application(self, app_name: str) -> Dict[str, Any]:
        """M·ªü ·ª©ng d·ª•ng"""
        try:
            if self.safe_mode:
                print(f"üöÄ M·ªü ·ª©ng d·ª•ng: {app_name}")
                choice = input("X√°c nh·∫≠n? (y/n): ").lower()
                if choice != 'y':
                    return {"success": False, "message": "ƒê√£ h·ªßy"}
            
            if os.name == 'nt':  # Windows
                os.startfile(app_name)
            else:  # Linux/Mac
                subprocess.Popen(['open', app_name])
            
            return {"success": True, "message": f"ƒê√£ m·ªü: {app_name}"}
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    def toggle_safe_mode(self):
        """B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô an to√†n"""
        self.safe_mode = not self.safe_mode
        status = "B·∫¨T" if self.safe_mode else "T·∫ÆT"
        return {"success": True, "message": f"Ch·∫ø ƒë·ªô an to√†n: {status}"}

class ToolExecutor:
    """Class th·ª±c hi·ªán c√°c tools d·ª±a tr√™n input c·ªßa user"""
    
    def __init__(self):
        self.tools = ComputerTools()
        self.tool_mapping = {
            # File operations
            "list": self.tools.list_files,
            "create_folder": self.tools.create_folder,
            "copy": self.tools.copy_file,
            "move": self.tools.move_file,
            "delete": self.tools.delete_file,
            "read": self.tools.read_file,
            "write": self.tools.write_file,
            "search": self.tools.search_files,
            
            # System operations
            "system_info": self.tools.get_system_info,
            "processes": self.tools.get_running_processes,
            "command": self.tools.execute_command,
            "open": self.tools.open_application,
            
            # External APIs
            "weather": self.tools.get_weather,
            
            # Settings
            "safe_mode": self.tools.toggle_safe_mode
        }
    
    def execute(self, tool_name: str, **kwargs) -> Dict[str, Any]:
        """Th·ª±c hi·ªán tool"""
        if tool_name in self.tool_mapping:
            try:
                return self.tool_mapping[tool_name](**kwargs)
            except Exception as e:
                return {"success": False, "message": f"L·ªói th·ª±c hi·ªán {tool_name}: {str(e)}"}
        else:
            return {"success": False, "message": f"Kh√¥ng t√¨m th·∫•y tool: {tool_name}"}
    
    def get_available_tools(self) -> List[str]:
        """L·∫•y danh s√°ch tools c√≥ s·∫µn"""
        return list(self.tool_mapping.keys())